import java.net.*;
import java.io.*;
import java.lang.Thread;

public class Serverus {
	private static String path = new String("D:\\Andrei\\Scoala\\SE\\RicaMaps\\ServerClient\\Routes.txt");
	private static String[][][] answerStrings = new String[200][200][1500]; 
	private static double[][] mapNodes = new double[200][2]; //lat = [n][0], long = [n][1]
	private static int nrOfNodes = 0;

	public static void main(String[] args) throws IOException {
		
		// read files and put in ram
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line;
		line = br.readLine();
		String[] nodes = line.split("|");
		
		for(String coords : nodes){ //read nodes
			//lat long
			System.out.println(coords);
			coords = coords.substring(1, coords.length()-1);
			String[] latLong = coords.split(",");
			mapNodes[nrOfNodes][0] = Double.parseDouble(latLong[0]);
			mapNodes[nrOfNodes][1] = Double.parseDouble(latLong[1]);
			nrOfNodes++;
		}
		
		while ((line = br.readLine()) != null) { //read routes
			String[] exploded = line.split("|"); //start index 0, end index 1, moment in minutes 2, string 3, -h-m 4
			int indexStart, indexEnd, time;
			indexStart = Integer.parseInt(exploded[0]);
			indexEnd = Integer.parseInt(exploded[1]);
			time = Integer.parseInt(exploded[2]);
			String[] coords = exploded[3].split(",");
			StringBuilder sb = new StringBuilder("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[");
			
			for(String c: coords) {
				sb.append("[");
				sb.append(mapNodes[Integer.parseInt(c)][0]);
				sb.append(",");
				sb.append(mapNodes[Integer.parseInt(c)][1]);
				sb.append("]");
			}
			
			sb.append(exploded[4]);
			
			answerStrings[indexStart][indexEnd][time] = sb.toString();
		}
		br.close();
		
		System.out.println("Started multithreaded server on port 4040");

		try (ServerSocket serverSocket = new ServerSocket(4040);) {
			while (true) {
				Socket clientSocket = serverSocket.accept();

				ClientHandler handler = new ClientHandler(clientSocket);
				handler.start();
			}
		} catch (IOException e) {
			System.out.println("Exception caught when trying to listen on port 4040 or listening for a connection");
			System.out.println(e.getMessage());
		}
	}
	
	public static String getAnswer(String start, String end, int time) {
		int indexStart = getIndex(start);
		int indexEnd = getIndex(end);
		return answerStrings[indexStart][indexEnd][time];
	}
	
	private static int getIndex(String latlong) {

		String[] ll = latlong.split(",");
		double lati = Double.parseDouble(ll[0]);
		double longi = Double.parseDouble(ll[1]);
		for(int i=0; i<nrOfNodes; i++) {
			if(mapNodes[i][0] == lati && mapNodes[i][1] == longi) return i;
		}
		
		return -1;
	}
}

class ClientHandler extends Thread {
	Socket client;

	ClientHandler(Socket client) {
		this.client = client;
	}

	public void run() {
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));
			PrintWriter writer = new PrintWriter(client.getOutputStream(), true);
			System.out.println("Am primit cleent");
			while (true) {
				String line = reader.readLine();
				Serverus.getAnswer("", "", 0);
				if (line.toLowerCase().equals("close")) // daca primeste close se inchide threadul cu conexiunea curenta
					break;
				//line will be x1-y1-x2-y2-h-m
				System.out.println("Cleentu o zis " + line);
				
				String[] exploded = line.split("-");
				int time = Integer.parseInt(exploded[4])*60 + Integer.parseInt(exploded[5]);
				String ans = Serverus.getAnswer(exploded[0]+","+exploded[1], exploded[2]+","+exploded[3], time);
				
				writer.println(ans);

			}
		} catch (Exception e) {
			System.err.println("Exception caught: client disconnected.");
		} finally {
			try {
				client.close();
			} catch (Exception e) {
				;
			}
		}
	}
}